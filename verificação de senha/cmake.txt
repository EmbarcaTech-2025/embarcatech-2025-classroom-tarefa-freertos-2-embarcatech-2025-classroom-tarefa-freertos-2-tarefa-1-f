# == DO NOT EDIT THE FOLLOWING LINES for the Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.1.1)
set(toolchainVersion 14_2_Rel1)
set(picotoolVersion 2.1.1)
set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()
# ====================================================================================

cmake_minimum_required(VERSION 3.12)

# ðŸ‘‡ Placa usada
set(PICO_BOARD pico_w CACHE STRING "Board type")

# Caminho do FreeRTOS
if (DEFINED ENV{FREERTOS_PATH})
  set(FREERTOS_PATH $ENV{FREERTOS_PATH})
else()
  set(FREERTOS_PATH ${CMAKE_CURRENT_LIST_DIR}/FreeRTOS-Kernel)
endif()

message("FreeRTOS Kernel located in ${FREERTOS_PATH}")

# Importa SDKs
include(pico_sdk_import.cmake)
include(${FREERTOS_PATH}/portable/ThirdParty/GCC/RP2040/FreeRTOS_Kernel_import.cmake)

project(cofreRTOS C CXX ASM)

# Inicializa o SDK
pico_sdk_init()

# Adiciona o executÃ¡vel
add_executable(cofreRTOS
    app/main.c
    ssd1306_i2c.c
    ${FREERTOS_PATH}/portable/MemMang/heap_4.c
)

# Includes necessÃ¡rios
target_include_directories(cofreRTOS PRIVATE
    ${CMAKE_CURRENT_LIST_DIR}
    ${CMAKE_CURRENT_LIST_DIR}/include
    ${FREERTOS_PATH}/include
    ${FREERTOS_PATH}/portable/ThirdParty/GCC/RP2040
)

# Linka as bibliotecas
target_link_libraries(cofreRTOS 
    pico_stdlib 
    hardware_i2c
    hardware_pwm
    hardware_gpio
    FreeRTOS-Kernel
)

# Gera arquivos extras (.uf2 etc.)
pico_add_extra_outputs(cofreRTOS)
